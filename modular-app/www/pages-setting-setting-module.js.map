{"version":3,"sources":["webpack:///./src/app/pages/setting/setting.module.ts","webpack:///./src/app/pages/setting/setting.page.html","webpack:///./src/app/pages/setting/setting.page.scss","webpack:///./src/app/pages/setting/setting.page.ts"],"names":[],"mappings":"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","file":"pages-setting-setting-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SettingPage } from './setting.page';\nimport { TranslateModule } from '@ngx-translate/core';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TranslateModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [SettingPage]\n})\nexport class SettingPageModule {}\n","module.exports = \"<ion-header no-border>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button></ion-back-button>\\n        </ion-buttons>\\n        <ion-title>\\n            {{'label_other_settinga'|translate}}\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n    <ion-list>\\n        <ion-radio-group (ionChange)=\\\"onLanguageChanged($event)\\\" [(ngModel)]=\\\"selectedLanguage\\\">\\n            <ion-list-header>\\n                <ion-label>{{title}}</ion-label>\\n            </ion-list-header>\\n\\n            <ion-item *ngFor=\\\"let language of languages\\\">\\n                <ion-label>{{language.value}}</ion-label>\\n                <ion-radio slot=\\\"start\\\" value=\\\"{{language.key}}\\\"></ion-radio>\\n            </ion-item>\\n\\n        </ion-radio-group>\\n    </ion-list>\\n    <ion-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" slot=\\\"fixed\\\">\\n        <ion-fab-button class=\\\"save-button\\\" (click)=\\\"saveOtherSetting()\\\">\\n            <ion-icon name=\\\"save\\\"></ion-icon>\\n        </ion-fab-button>\\n    </ion-fab>\\n</ion-content>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3NldHRpbmcvc2V0dGluZy5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { SettingService } from '../../services/setting.service';\nimport { TranslateService,  DefaultLangChangeEvent } from '@ngx-translate/core';\nimport { ConfigService } from 'src/app/services/config.service';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-setting',\n  templateUrl: './setting.page.html',\n  styleUrls: ['./setting.page.scss'],\n})\nexport class SettingPage implements OnInit {\n\n  setting: any;\n  languages: any;\n  myLanguage: any;\n  selectedLanguage: any;\n  form: any;\n  title: string;\n  constructor(private settingService: SettingService,\n    private location:Location,\n     private translate: TranslateService, \n     private config: ConfigService) {\n    this.translate.use(window[this.config.getAppModuleName()]['language']);\n    this.setLanguages();\n\n  }\n\n  ngOnInit() {\n    this.translate.get('title_app').subscribe(\n      value => {\n        this.title = value;\n      }\n    );\n    this.translate.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n      this.translate.get('title_app').subscribe(\n        value => {\n          this.title = value;\n        }\n      );\n\n    });\n  }\n\n  ionViewDidLoad() {\n\n\n  }\n  setLanguages(): any {\n    this.setting = this.settingService.getUserSetting();\n    this.myLanguage = this.settingService.getUserLanguage();\n    if (this.myLanguage) {\n       this.selectedLanguage = this.myLanguage;\n       this.translate.setDefaultLang(this.selectedLanguage);\n\n      }\n    const languages = this.settingService.getLanguages();\n    if (languages) {\n      const keys = Array.from(Object.keys(languages));\n\n      this.languages = keys.map(element => {\n        return {\n          'key': element,\n          'value': languages[element]\n        };\n      });\n    }\n  }\n  saveOtherSetting() {\n    this.settingService.setUserLanguage(this.selectedLanguage);\n    this.translate.setDefaultLang(this.selectedLanguage);\n    this.location.back()\n\n  }\n  onLanguageChanged(data) {\n    console.log('Lingua = ', this.selectedLanguage);\n\n  }\n}\n"],"sourceRoot":""}