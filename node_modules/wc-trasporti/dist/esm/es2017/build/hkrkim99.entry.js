import { h } from '../mycomponent.core.js';

import { a as moment } from './chunk-43a1777c.js';

class AppHome {
    constructor() {
        this.rowHeight = 20;
        this.headerRowHeight = 25;
        this.stopsColWidth = 100;
        this.tableStyle = 'ic_text_size';
        this.headervariable = 90;
        this.stopsColLineHeight = 20;
        this.headerHeight = 44 + this.headervariable + 1;
        this.cellWidthBase = 50;
        this.cellHeightBase = 28;
        this.firstRowHeight = 28;
        this.scrollLeftPosition = 0;
        this.tt = null;
        this.runningDate = new Date();
        this.expandStr = function (str) {
            if (str.length < 9) {
                var m = 9 - str.length;
                var l = Math.round(m / 2);
                for (var i = 0; i < l; i++) {
                    str = '&nbsp;' + str;
                }
                for (var i = 0; i < m - l; i++) {
                    str += '&nbsp';
                }
            }
            return str;
        };
    }
    reloadTable() {
        this.componentWillLoad();
    }
    watchHandler(newValue, oldValue) {
        console.log('animation from' + newValue + 'to' + oldValue);
        this.animateData(oldValue, newValue);
    }
    changeStyle() {
        this.changeStyleTable();
    }
    handleScroll(ev) {
        console.log('the body was scrolled', ev);
    }
    animateData(oldValue, newValue) {
        throw new Error("Method not implemented." + oldValue + newValue);
    }
    getTextWidth() {
        var measurer = this.element.shadowRoot.querySelector('#measurer');
        return (measurer.getBoundingClientRect().width);
    }
    ;
    setBiggerStyle() {
        this.littletable = true;
        var rowHeight = 30;
        this.rowHeight = rowHeight;
        this.headerRowHeight = 30;
        this.stopsColWidth = 150;
        this.stopsColLineHeight = 30;
        var headerTable = this.element.shadowRoot.querySelector('#header-table');
        var headerheight = 90;
        if (headerTable) {
            headerheight = headerTable.clientHeight;
        }
        this.headervariable = headerheight + 5 * this.header_row_number;
        var headerHeight = 44 + this.headervariable + 1;
        this.fontsize = 16;
        this.scrollHeight = window.innerHeight - headerHeight;
    }
    ;
    setSmallerStyle() {
        this.littletable = false;
        var rowHeight = 20;
        this.rowHeight = rowHeight;
        this.stopsColWidth = 100;
        this.fontsize = 12;
        this.stopsColLineHeight = 20;
        var headerTable = this.element.shadowRoot.querySelector('#header-table');
        var headerheight = 90;
        if (headerTable) {
            headerheight = headerTable.clientHeight;
        }
        this.headervariable = headerheight + 5 * this.header_row_number;
        var headerHeight = 44 + this.headervariable + 1;
        this.scrollHeight = window.innerHeight - headerHeight;
    }
    ;
    changeStyleTable() {
        setTimeout(() => {
            if (!this.littletable) {
                this.setBiggerStyle();
            }
            else {
                this.setSmallerStyle();
            }
            this.tableStyle = this.littletable ? 'ic_text_size' : 'ic_text_size_outline';
        }, 100);
        setTimeout(function () {
        }, 2000);
    }
    locateTablePosition(data, time) {
        if (!data)
            return;
        time = moment(time).format('HH:mm');
        for (var i = 0; i < data.tripIds.length; i++) {
            if (!data.times[i])
                continue;
            for (var j = 0; j < data.times[i].length; j++) {
                if (!!data.times[i][j]) {
                    if (data.times[i][j].localeCompare(time) >= 0) {
                        return i;
                    }
                }
            }
        }
        return data.tripIds.length - 1;
    }
    initMeasures(data, noscroll) {
        if (window.innerHeight < window.innerWidth) {
            this.stopsColWidth = 170;
        }
        else {
            if (this.littletable) {
                this.stopsColWidth = 150;
            }
            else {
                this.stopsColWidth = 100;
            }
        }
        this.header = null;
        this.col = null;
        if (!data.tripIds || data.tripIds.length == 0)
            return;
        this.tableHeight = data.stops.length * this.rowHeight;
        this.scrollWidth = window.innerWidth + (this.accessibility ? 0 : 25);
        this.scrollHeight = window.innerHeight - this.headerHeight;
        this.tableHeaderHeight = this.showHeader ? (this.header_row_number * this.headerRowHeight) : 0;
        if (!noscroll) {
            setTimeout(() => {
                var columnScrollTo = this.locateTablePosition(data, new Date());
                columnScrollTo = Math.min(columnScrollTo, data.tripIds.length - (this.scrollWidth - this.stopsColWidth) / this.colwidth);
                var pos = this.colwidth * columnScrollTo;
                var table = this.element.shadowRoot.querySelector('#table-table');
                table.scrollTo(pos, 0);
            }, 300);
        }
    }
    componentWillLoad() {
        this.changeStyle();
        this.buildData();
    }
    buildData() {
        this.dataTT = JSON.parse(this.data);
        this.rootstyle();
        this.Fetch();
        this.initMeasures(this.dataTT, false);
    }
    rootstyle() {
        let root = document.documentElement;
        var top_table = 70;
        root.style.setProperty('--dim-orari-wid', (screen.width - (screen.width / 100 * 85)).toString() + 'px');
        root.style.setProperty('--top-table', top_table + 'px');
        root.style.setProperty('--dim-orari-hei', (screen.height - top_table).toString() + 'px');
        root.style.setProperty('--dim-fermate-wid', (screen.width - (screen.width / 100 * 15.5)).toString() + 'px');
        root.style.setProperty('--dim-fermate-hei', (screen.height - top_table).toString() + 'px');
    }
    BiancoNero(param) {
        this.fermate = "";
        for (let i in param) {
            this.fermate += parseInt(i) % 2 == 0 ? "<div id='grigioFermate'>" : "<div id='biancoFermate'>";
            this.fermate += param[i].toString() + "</div>";
        }
    }
    componentDidLoad() {
        const list = this.element.shadowRoot.querySelectorAll('li.my-list');
        [].forEach.call(list, li => li.style.color = 'red');
        this.setStyle();
        this.colwidth = this.getTextWidth();
    }
    setStyle() {
        this.titleBar = this.element.shadowRoot.querySelector('.titleBar');
        if (this.titleBar) {
            this.titleBar.style.backgroundColor = this.color;
            this.titleBar.style.color = this.textColor(this.color);
        }
        this.subtitleBar = this.element.shadowRoot.querySelector('.day-bar');
        if (this.subtitleBar) {
            this.subtitleBar.style.backgroundColor = this.color;
            this.subtitleBar.style.color = this.textColor(this.color);
        }
    }
    getDelayValue(delay) {
        var res = '';
        if (delay && delay.SERVICE && delay.SERVICE > 0) {
            res += delay.SERVICE + '\'';
        }
        if (delay && delay.USER && delay.USER > 0) {
            if (res.length > 0)
                res += ' / ';
            res += delay.USER + '\'';
        }
        return res;
    }
    StampaOrari(data) {
        this.header_row_number = this.showtrips ? 2 : 1;
        var dataStr = '';
        var headStr = this.header_row_number == 2 ? ['', ''] : [''];
        var colStr = '';
        var tableCornerStr = ['', ''];
        var rows = [];
        if (data.stops) {
            for (var row = 0; row < data.stops.length + this.header_row_number; row++) {
                var rowContent = [];
                for (var col = 0; col <= data.tripIds.length; col++) {
                    if (col == 0 && row == 0) {
                        var str = this.labeldelay;
                        rowContent.push(str);
                        tableCornerStr[0] = str;
                    }
                    else if (this.header_row_number == 2 && row == 1 && col == 0) {
                        var str = this.labeltrips;
                        rowContent.push(str);
                        tableCornerStr[1] = str;
                    }
                    else if (col == 0) {
                        rowContent.push(data.stops[row - this.header_row_number]);
                        if (!!data.wheelChairBoarding && data.wheelChairBoarding[row - this.header_row_number] == 1) {
                            colStr += '<div class="accessibilityBullet"><ion-icon name="radio-button-on"></ion-icon></div>';
                        }
                        else {
                            colStr += '<div class="accessibilityBullet"></div>';
                        }
                        colStr += data.stops[row - this.header_row_number] + '<br/>';
                    }
                    else if (row == 0) {
                        var str = '';
                        if (data.delays)
                            str = this.getDelayValue(data.delays[col - 1]);
                        rowContent.push(str);
                        str = this.expandStr(str);
                        headStr[0] += str;
                    }
                    else if (this.header_row_number == 2 && row == 1) {
                        var str1 = this.getTripText(this.agencyid, data.tripIds[col - 1]);
                        console.log(str1);
                        rowContent.push(str1);
                        str1 = this.expandStr(str1);
                        headStr[1] += str1;
                    }
                    else {
                        var str1 = data.times[col - 1][row - this.header_row_number];
                        rowContent.push(str1);
                        if (!str1)
                            str1 = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
                        dataStr += '&nbsp;&nbsp;' + str1 + '&nbsp;&nbsp;';
                        if (col == data.tripIds.length)
                            dataStr += '<br/>';
                    }
                }
                rows.push(rowContent);
            }
        }
        else {
            data.stops = [];
            data.stopIds = [];
        }
        this.headStr = headStr;
        this.orari = dataStr;
        this.tableCornerStr = tableCornerStr;
        this.fermate = colStr;
        this.tt = rows;
        this.initMeasures(data, false);
    }
    ;
    tripExtractor(agencyId, tripId) {
        if (agencyId == '5' || agencyId == '6' || agencyId == '10') {
            return tripId.replace(/\d+.*/g, '').toUpperCase();
        }
        return tripId;
    }
    getTripText(agencyId, tripLabel) {
        try {
            return this.tripExtractor(agencyId, tripLabel);
        }
        catch (e) {
            return tripLabel;
        }
    }
    Fetch() {
        if (this.dataTT) {
            console.log(this.dataTT);
            this.StampaOrari(this.dataTT);
        }
        if (this.citta && this.numero) {
            this.remoteFetch();
        }
    }
    remoteFetch() {
        fetch('https://os.smartcommunitylab.it/core.mobility/timetable/' + this.citta + '/' + this.numero)
            .then((response) => {
            response.json();
        })
            .then(response => {
            this.dataTT = response['stopNames'];
            this.BiancoNero(this.dataTT);
            this.dataTT = response['trips'];
            this.StampaOrari(this.dataTT['times']);
        });
    }
    scrollOrari(event) {
        event = event;
        if (this.header == null) {
            this.header = this.element.shadowRoot.querySelector('#table-header');
        }
        if (this.col == null) {
            this.col = this.element.shadowRoot.querySelector('#table-col');
        }
        var pos = {
            top: event.detail.currentY,
            left: event.detail.currentX
        };
        if (this.header != null) {
            this.header.style.top = pos.top + 'px';
        }
        if (this.col != null) {
            this.col.style.left = pos.left + 'px';
        }
    }
    visualizza(oggetto) {
        return oggetto;
    }
    prevDate() {
        this.changeDateEvent.emit('prevDate');
    }
    nextDate() {
        this.changeDateEvent.emit('nextDate');
    }
    textColor(color) {
        if (this.isDarkColor(color))
            return '#fff';
        return '#000';
    }
    ;
    isDarkColor(color) {
        if (!color)
            return true;
        var c = color.substring(1);
        var rgb = parseInt(c, 16);
        var r = (rgb >> 16) & 0xff;
        var g = (rgb >> 8) & 0xff;
        var b = (rgb >> 0) & 0xff;
        var luma = (r + g + b) / 3;
        return luma < 128;
    }
    ;
    showStop(stop) {
        this.showStopEvent.emit(stop);
    }
    render() {
        var styleTableScroll = {
            height: `${this.scrollHeight}px`,
            width: `${this.scrollWidth}px`
        };
        var styleTableCol = {
            width: `${this.stopsColWidth}px`,
            lineHeight: `${this.stopsColLineHeight}px`,
            backgroundSize: `100% ${this.rowHeight * 2}px`,
            fontSize: `${this.fontsize}px`,
            left: `${this.col ? this.col.style.left : 0}px`,
            top: `${this.col ? this.col.style.top : 25 * (this.showHeader ? this.header_row_number : 0)}px`,
            backgroundImage: `linear-gradient(180deg,#fff, #fff ${this.rowHeight}px, #eee ${this.rowHeight}px, #eee ${this.rowHeight * 2}px`
        };
        var styleTableHeader = {
            left: `${this.stopsColWidth}px`,
            top: `${this.header ? this.header.style.top : 0}`,
            fontSize: `${this.fontsize}}px`
        };
        var styleTableTable = {
            left: `${this.stopsColWidth}px`,
            top: `${this.tableHeaderHeight}px`,
            lineHeight: `${this.stopsColLineHeight}px`,
            backgroundSize: `100% ${this.rowHeight * 2}px`,
            fontSize: `${this.fontsize}px`,
            backgroundImage: `linear-gradient(180deg,transparent, transparent ${this.rowHeight}px, #eee ${this.rowHeight}px, #eee ${this.rowHeight * 2}px)`
        };
        var styleTableCorner = {
            width: `${this.stopsColWidth}px`,
            height: `${this.tableHeaderHeight}px`
        };
        var styleAccessibility = {
            fontSize: `${this.fontsize}px`
        };
        var styleSecondRow = {
            fontSize: `${this.fontsize}px`
        };
        return [
            h("div", null,
                h("div", { id: "header-table" },
                    h("div", { class: "row titleBar" },
                        h("div", { class: "col tt-subtitle" }, this.titolo)),
                    h("ion-row", { class: "line-title" },
                        h("ion-col", { size: "12" },
                            h("span", { class: "title" }, this.title))),
                    h("ion-row", { class: "day-bar" },
                        h("ion-col", { size: "1", class: "col col-25 tt-day btn", onClick: () => this.prevDate() },
                            h("ion-icon", { name: "arrow-dropleft" })),
                        h("ion-col", { size: "10", class: "col col-50 tt-day " }, this.datetable),
                        h("ion-col", { size: "1", class: "col col-25 tt-day btn", onClick: () => this.nextDate() },
                            h("ion-icon", { name: "arrow-dropright" })))),
                this.emptytable
                    ? h("div", { class: "no-table" }, this.emptytablelabel)
                    : h("div", { class: "row table-container" },
                        h("div", { class: "tt-table" + (this.accessibility === true ? ' tt-table-acc' : ' ') },
                            this.orari && this.showHeader
                                ? h("div", { id: "table-corner", style: styleTableCorner },
                                    h("div", { style: styleAccessibility },
                                        " ",
                                        h("ion-icon", { class: "table-accessibility", name: "person" }),
                                        h("span", { class: "corner-delay" }, this.tableCornerStr[0])),
                                    this.header_row_number == 2
                                        ? h("div", { class: "delay", style: styleSecondRow }, this.tableCornerStr[1])
                                        : "")
                                : "",
                            h("ion-content", { scrollX: true, scrollY: true, scrollEvents: true, "has-bouncing": "false", id: "tablescroll", onIonScrollStart: () => { }, onIonScroll: (event) => this.scrollOrari(event), onIonScrollEnd: () => { }, style: styleTableScroll, class: "overlapDiv", "delegate-handle": "list" },
                                h("div", { id: "table-col", style: styleTableCol }, this.dataTT.stops.map((stop, index) => parseInt(index) % 2 == 0
                                    ? h("div", { id: 'grigioFermate', onClick: () => this.showStop(stop) }, this.accessibility
                                        ? h("div", null, !!this.dataTT.wheelChairBoarding && this.dataTT.wheelChairBoarding[index] == 1
                                            ? h("div", null,
                                                h("div", { class: "accessibilityBullet" },
                                                    h("ion-icon", { name: "radio-button-on" })),
                                                stop)
                                            : h("div", null,
                                                h("div", { class: "accessibilityBullet" }),
                                                "  ",
                                                h("span", null, stop)))
                                        : h("div", null, stop))
                                    : h("div", { id: 'biancoFermate', onClick: () => this.showStop(stop) }, this.accessibility
                                        ? h("div", null, !!this.dataTT.wheelChairBoarding && this.dataTT.wheelChairBoarding[index] == 1
                                            ? h("div", null,
                                                h("div", { class: "accessibilityBullet" },
                                                    h("ion-icon", { name: "radio-button-on" })),
                                                stop)
                                            : h("div", null,
                                                h("div", { class: "accessibilityBullet" }),
                                                " ",
                                                h("span", null, stop)))
                                        : h("div", null, stop)))),
                                this.showHeader
                                    ? h("div", { id: "table-header", style: styleTableHeader },
                                        h("div", { innerHTML: this.headStr[0] }),
                                        this.header_row_number == 2
                                            ? h("div", { innerHTML: this.headStr[1], class: "header-row-types" })
                                            : "")
                                    : "",
                                h("div", { id: "table-table", innerHTML: this.visualizza(this.orari), style: styleTableTable }),
                                h("div", { id: "measurer", class: "mesurer" }, "123456789")))))
        ];
    }
    static get is() { return "wc-trasporti-table"; }
    static get encapsulation() { return "shadow"; }
    static get properties() { return {
        "accessibility": {
            "type": Boolean,
            "attr": "accessibility"
        },
        "agencyid": {
            "type": String,
            "attr": "agencyid"
        },
        "arrows": {
            "type": Boolean,
            "attr": "arrows"
        },
        "citta": {
            "type": String,
            "attr": "citta"
        },
        "color": {
            "type": String,
            "attr": "color"
        },
        "data": {
            "type": String,
            "attr": "data",
            "watchCallbacks": ["reloadTable"]
        },
        "dataTT": {
            "state": true
        },
        "datetable": {
            "type": String,
            "attr": "datetable",
            "watchCallbacks": ["watchHandler"]
        },
        "day": {
            "type": String,
            "attr": "day"
        },
        "element": {
            "elementRef": true
        },
        "emptytable": {
            "type": Boolean,
            "attr": "emptytable"
        },
        "emptytablelabel": {
            "type": String,
            "attr": "emptytablelabel"
        },
        "fermate": {
            "state": true
        },
        "font": {
            "type": String,
            "attr": "font"
        },
        "fontsize": {
            "state": true
        },
        "labeldelay": {
            "type": String,
            "attr": "labeldelay"
        },
        "labeltrips": {
            "type": String,
            "attr": "labeltrips"
        },
        "lang": {
            "type": String,
            "attr": "lang"
        },
        "littletable": {
            "type": Boolean,
            "attr": "littletable",
            "watchCallbacks": ["changeStyle"]
        },
        "numero": {
            "type": String,
            "attr": "numero"
        },
        "orari": {
            "state": true
        },
        "showHeader": {
            "type": Boolean,
            "attr": "show-header"
        },
        "showtrips": {
            "type": Boolean,
            "attr": "showtrips"
        },
        "title": {
            "type": String,
            "attr": "title"
        },
        "titolo": {
            "type": String,
            "attr": "titolo"
        },
        "tripsvalue": {
            "type": String,
            "attr": "tripsvalue"
        }
    }; }
    static get events() { return [{
            "name": "changeDateEvent",
            "method": "changeDateEvent",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }, {
            "name": "showStopEvent",
            "method": "showStopEvent",
            "bubbles": true,
            "cancelable": true,
            "composed": true
        }]; }
    static get listeners() { return [{
            "name": "scroll",
            "method": "handleScroll",
            "passive": true
        }]; }
    static get style() { return "#colonna1{width:20%}#colonna1,#riga1{position:relative}#riga1{height:6%}*{font-family:monospace}.title{font-family:Titillium Web!important}#listaFermate{position:absolute;top:var(--top-table);height:var(--dim-orari-hei);overflow:auto;overflow-y:hidden}#fermate{position:absolute;top:0;min-width:100px;max-width:300px;width:10%}#contentFermate{height:800px;width:300px}#myDIV{position:absolute;top:var(--top-table);height:var(--dim-fermate-hei);width:var(--dim-fermate-wid);overflow:auto;overflow-x:var(--blocca-barra)}#content{height:800px;width:2000px}#orari{top:0;width:10%;left:15%}#measurer,#orari{position:absolute}#measurer{white-space:nowrap;font-family:RobotoMono;font-size:12px;color:transparent;background-color:transparent}#biancoOrari{background-color:#fff}#biancoOrari,#grigioOrari{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;position:relative}#grigioOrari{background-color:#eee}#biancoFermate{background-color:#fff}#biancoFermate,#grigioFermate{position:relative;margin-left:28px}#grigioFermate{background-color:#eee}::-webkit-scrollbar{width:10px}::-webkit-scrollbar-thumb,::-webkit-scrollbar-track{background:hsla(0,0%,100%,0)}::-webkit-scrollbar-thumb:hover{background:hsla(0,0%,100%,0)}.tt-day{font-size:20px;line-height:40px;text-align:center;padding:0;text-transform:uppercase;white-space:nowrap}.tt-day.btn{font-size:30px}.tt-day.btn a.activated,.tt-day.btn a:active,.tt-day.btn a:focus,.tt-day.btn a:hover{opacity:.5}#table-header{white-space:nowrap;font-family:RobotoMono;position:absolute;background-color:#fff;font-size:12px;z-index:10}#table-header div{border-bottom:1px solid #bbb;height:25px}#table-header div:first-child{color:#cd251c}.header-row-types{height:20px}#table-table{white-space:nowrap;font-size:12px;position:absolute;left:0;-webkit-transition-duration:.3s;-moz-transition-duration:.3s;-o-transition-duration:.3s;transition-duration:.3s}#table-table br{font-family:RobotoMono}#table-col{line-height:20px;white-space:nowrap;border-right:1px solid #bbb;z-index:10;overflow:hidden;text-overflow:ellipsis}#table-col,#table-corner{font-size:12px;position:absolute;background-color:#fff;padding-left:3px}#table-corner{height:25px;z-index:100;text-align:left}#table-corner div{height:25px;border-bottom:1px solid #bbb;border-right:1px solid #bbb;background-color:#fff}#table-corner>div .corner-delay{margin-left:10px;vertical-align:top}.accessibilityBullet{display:inline-table;left:-20px;position:absolute}.delay{padding-left:40px}.table-container{padding:0}.table-container ion-scroll{margin-top:0}.tt-table{position:absolute;left:-25px;-webkit-transition-duration:.3s;-moz-transition-duration:.3s;-o-transition-duration:.3s;transition-duration:.3s}.tt-table-acc{left:0!important}.tt-table #table-col div{width:0;margin-right:5px;text-align:center}.tt-subtitle{text-align:center}.table-accessibility{color:#2975a7;margin-right:4px;font-size:25px}.line-title,.no-table{text-align:center}.no-table{width:100%;size:22px}"; }
}

const PLATFORMS_MAP = {
    'ipad': isIpad,
    'iphone': isIphone,
    'ios': isIOS,
    'android': isAndroid,
    'phablet': isPhablet,
    'tablet': isTablet,
    'cordova': isCordova,
    'capacitor': isCapacitorNative,
    'electron': isElectron,
    'pwa': isPWA,
    'mobile': isMobile,
    'mobileweb': isMobileWeb,
    'desktop': isDesktop,
    'hybrid': isHybrid
};
function getPlatforms(win) {
    return setupPlatforms(win);
}
function isPlatform(win, platform) {
    return getPlatforms(win).includes(platform);
}
function setupPlatforms(win) {
    win.Ionic = win.Ionic || {};
    let platforms = win.Ionic.platforms;
    if (platforms == null) {
        platforms = win.Ionic.platforms = detectPlatforms(win);
        const classList = win.document.documentElement.classList;
        platforms.forEach(p => classList.add(`plt-${p}`));
    }
    return platforms;
}
function isMobileWeb(win) {
    return isMobile(win) && !isHybrid(win);
}
function detectPlatforms(win) {
    return Object.keys(PLATFORMS_MAP).filter(p => PLATFORMS_MAP[p](win));
}
function isIpad(win) {
    return testUserAgent(win, /iPad/i);
}
function isIphone(win) {
    return testUserAgent(win, /iPhone/i);
}
function isIOS(win) {
    return testUserAgent(win, /iPad|iPhone|iPod/i);
}
function isAndroid(win) {
    return testUserAgent(win, /android|sink/i);
}
function isPhablet(win) {
    const width = win.innerWidth;
    const height = win.innerHeight;
    const smallest = Math.min(width, height);
    const largest = Math.max(width, height);
    return (smallest > 390 && smallest < 520) &&
        (largest > 620 && largest < 800);
}
function isTablet(win) {
    const width = win.innerWidth;
    const height = win.innerHeight;
    const smallest = Math.min(width, height);
    const largest = Math.max(width, height);
    return (smallest > 460 && smallest < 820) &&
        (largest > 780 && largest < 1400);
}
function isMobile(win) {
    return matchMedia(win, '(any-pointer:coarse)');
}
function isDesktop(win) {
    return !isMobile(win);
}
function isHybrid(win) {
    return isCordova(win) || isCapacitorNative(win);
}
function isCordova(window) {
    const win = window;
    return !!(win['cordova'] || win['phonegap'] || win['PhoneGap']);
}
function isCapacitorNative(window) {
    const win = window;
    const capacitor = win['Capacitor'];
    return !!(capacitor && capacitor.isNative);
}
function isElectron(win) {
    return testUserAgent(win, /electron/);
}
function isPWA(win) {
    return win.matchMedia('(display-mode: standalone)').matches || win.navigator.standalone;
}
function testUserAgent(win, expr) {
    return expr.test(win.navigator.userAgent);
}
function matchMedia(win, query) {
    return win.matchMedia(query).matches;
}

function hostContext(selector, el) {
    return el.closest(selector) !== null;
}
function createColorClasses(color) {
    return (typeof color === 'string' && color.length > 0) ? {
        'ion-color': true,
        [`ion-color-${color}`]: true
    } : undefined;
}

class Content {
    constructor() {
        this.isScrolling = false;
        this.lastScroll = 0;
        this.queued = false;
        this.cTop = -1;
        this.cBottom = -1;
        this.detail = {
            scrollTop: 0,
            scrollLeft: 0,
            type: "scroll",
            event: undefined,
            startX: 0,
            startY: 0,
            startTimeStamp: 0,
            currentX: 0,
            currentY: 0,
            velocityX: 0,
            velocityY: 0,
            deltaX: 0,
            deltaY: 0,
            timeStamp: 0,
            data: undefined,
            isScrolling: true,
        };
        this.fullscreen = false;
        this.scrollX = false;
        this.scrollY = true;
        this.scrollEvents = false;
    }
    componentWillLoad() {
        if (this.forceOverscroll === undefined) {
            this.forceOverscroll = this.mode === "ios" && isPlatform(this.win, "mobile");
        }
    }
    componentDidLoad() {
        this.resize();
    }
    componentDidUnload() {
        this.onScrollEnd();
    }
    onClick(ev) {
        if (this.isScrolling) {
            ev.preventDefault();
            ev.stopPropagation();
        }
    }
    resize() {
        if (this.fullscreen) {
            this.queue.read(this.readDimensions.bind(this));
        }
        else if (this.cTop !== 0 || this.cBottom !== 0) {
            this.cTop = this.cBottom = 0;
            this.el.forceUpdate();
        }
    }
    readDimensions() {
        const page = getPageElement(this.el);
        const top = Math.max(this.el.offsetTop, 0);
        const bottom = Math.max(page.offsetHeight - top - this.el.offsetHeight, 0);
        const dirty = top !== this.cTop || bottom !== this.cBottom;
        if (dirty) {
            this.cTop = top;
            this.cBottom = bottom;
            this.el.forceUpdate();
        }
    }
    onScroll(ev) {
        const timeStamp = Date.now();
        const shouldStart = !this.isScrolling;
        this.lastScroll = timeStamp;
        if (shouldStart) {
            this.onScrollStart();
        }
        if (!this.queued && this.scrollEvents) {
            this.queued = true;
            this.queue.read(ts => {
                this.queued = false;
                this.detail.event = ev;
                updateScrollDetail(this.detail, this.scrollEl, ts, shouldStart);
                this.ionScroll.emit(this.detail);
            });
        }
    }
    getScrollElement() {
        return Promise.resolve(this.scrollEl);
    }
    scrollToTop(duration = 0) {
        return this.scrollToPoint(undefined, 0, duration);
    }
    scrollToBottom(duration = 0) {
        const y = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;
        return this.scrollToPoint(undefined, y, duration);
    }
    scrollByPoint(x, y, duration) {
        return this.scrollToPoint(x + this.scrollEl.scrollLeft, y + this.scrollEl.scrollTop, duration);
    }
    async scrollToPoint(x, y, duration = 0) {
        const el = this.scrollEl;
        if (duration < 32) {
            if (y != null) {
                el.scrollTop = y;
            }
            if (x != null) {
                el.scrollLeft = x;
            }
            return;
        }
        let resolve;
        let startTime = 0;
        const promise = new Promise(r => resolve = r);
        const fromY = el.scrollTop;
        const fromX = el.scrollLeft;
        const deltaY = y != null ? y - fromY : 0;
        const deltaX = x != null ? x - fromX : 0;
        const step = (timeStamp) => {
            const linearTime = Math.min(1, ((timeStamp - startTime) / duration)) - 1;
            const easedT = Math.pow(linearTime, 3) + 1;
            if (deltaY !== 0) {
                el.scrollTop = Math.floor((easedT * deltaY) + fromY);
            }
            if (deltaX !== 0) {
                el.scrollLeft = Math.floor((easedT * deltaX) + fromX);
            }
            if (easedT < 1) {
                requestAnimationFrame(step);
            }
            else {
                resolve();
            }
        };
        requestAnimationFrame(ts => {
            startTime = ts;
            step(ts);
        });
        return promise;
    }
    onScrollStart() {
        this.isScrolling = true;
        this.ionScrollStart.emit({
            isScrolling: true
        });
        if (this.watchDog) {
            clearInterval(this.watchDog);
        }
        this.watchDog = setInterval(() => {
            if (this.lastScroll < Date.now() - 120) {
                this.onScrollEnd();
            }
        }, 100);
    }
    onScrollEnd() {
        clearInterval(this.watchDog);
        this.watchDog = null;
        if (this.isScrolling) {
            this.isScrolling = false;
            this.ionScrollEnd.emit({
                isScrolling: false
            });
        }
    }
    hostData() {
        return {
            class: Object.assign({}, createColorClasses(this.color), { "content-sizing": hostContext("ion-popover", this.el), "overscroll": !!this.forceOverscroll }),
            style: {
                "--offset-top": `${this.cTop}px`,
                "--offset-bottom": `${this.cBottom}px`,
            }
        };
    }
    render() {
        const { scrollX, scrollY, forceOverscroll } = this;
        this.resize();
        return [
            h("div", { class: {
                    "inner-scroll": true,
                    "scroll-x": scrollX,
                    "scroll-y": scrollY,
                    "overscroll": (scrollX || scrollY) && !!forceOverscroll
                }, ref: el => this.scrollEl = el, onScroll: ev => this.onScroll(ev) }, h("slot", null)),
            h("slot", { name: "fixed" })
        ];
    }
    static get is() { return "ion-content"; }
    static get encapsulation() { return "shadow"; }
    static get properties() {
        return {
            "color": {
                "type": String,
                "attr": "color"
            },
            "config": {
                "context": "config"
            },
            "el": {
                "elementRef": true
            },
            "forceOverscroll": {
                "type": Boolean,
                "attr": "force-overscroll",
                "mutable": true
            },
            "fullscreen": {
                "type": Boolean,
                "attr": "fullscreen"
            },
            "getScrollElement": {
                "method": true
            },
            "queue": {
                "context": "queue"
            },
            "scrollByPoint": {
                "method": true
            },
            "scrollEvents": {
                "type": Boolean,
                "attr": "scroll-events"
            },
            "scrollToBottom": {
                "method": true
            },
            "scrollToPoint": {
                "method": true
            },
            "scrollToTop": {
                "method": true
            },
            "scrollX": {
                "type": Boolean,
                "attr": "scroll-x"
            },
            "scrollY": {
                "type": Boolean,
                "attr": "scroll-y"
            },
            "win": {
                "context": "window"
            }
        };
    }
    static get events() {
        return [{
                "name": "ionScrollStart",
                "method": "ionScrollStart",
                "bubbles": true,
                "cancelable": true,
                "composed": true
            }, {
                "name": "ionScroll",
                "method": "ionScroll",
                "bubbles": true,
                "cancelable": true,
                "composed": true
            }, {
                "name": "ionScrollEnd",
                "method": "ionScrollEnd",
                "bubbles": true,
                "cancelable": true,
                "composed": true
            }];
    }
    static get listeners() {
        return [{
                "name": "click",
                "method": "onClick",
                "capture": true
            }];
    }
    static get style() { return ":host{--background:var(--ion-background-color,#fff);--color:var(--ion-text-color,#000);--padding-top:0px;--padding-bottom:0px;--padding-start:0px;--padding-end:0px;--keyboard-offset:0px;--offset-top:0px;--offset-bottom:0px;--overflow:auto;display:block;position:relative;-ms-flex:1;flex:1;width:100%;height:100%;margin:0!important;padding:0!important;font-family:var(--ion-font-family,inherit);contain:size style}:host(.ion-color) .inner-scroll{background:var(--ion-color-base);color:var(--ion-color-contrast)}:host(.outer-content){--background:var(--ion-color-step-50,#f2f2f2)}.inner-scroll{left:0;right:0;top:calc(var(--offset-top) * -1);bottom:calc(var(--offset-bottom) * -1);padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:calc(var(--padding-top) + var(--offset-top));padding-bottom:calc(var(--padding-bottom) + var(--keyboard-offset) + var(--offset-bottom));position:absolute;background:var(--background);color:var(--color);-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden}\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.inner-scroll{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.scroll-x,.scroll-y{-webkit-overflow-scrolling:touch;will-change:scroll-position;-ms-scroll-chaining:none;overscroll-behavior:contain}.scroll-y{-ms-touch-action:pan-y;touch-action:pan-y;overflow-y:var(--overflow)}.scroll-x{-ms-touch-action:pan-x;touch-action:pan-x;overflow-x:var(--overflow)}.scroll-x.scroll-y{-ms-touch-action:auto;touch-action:auto}.overscroll:after,.overscroll:before{position:absolute;width:1px;height:1px;content:\"\"}.overscroll:before{bottom:-1px}.overscroll:after{top:-1px}:host(.content-sizing){contain:none}:host(.content-sizing) .inner-scroll{position:relative}"; }
}
function getParentElement(el) {
    if (el.parentElement) {
        return el.parentElement;
    }
    if (el.parentNode && el.parentNode.host) {
        return el.parentNode.host;
    }
    return null;
}
function getPageElement(el) {
    const tabs = el.closest("ion-tabs");
    if (tabs) {
        return tabs;
    }
    const page = el.closest("ion-app,ion-page,.ion-page,page-inner");
    if (page) {
        return page;
    }
    return getParentElement(el);
}
function updateScrollDetail(detail, el, timestamp, shouldStart) {
    const prevX = detail.currentX;
    const prevY = detail.currentY;
    const prevT = detail.timeStamp;
    const currentX = el.scrollLeft;
    const currentY = el.scrollTop;
    if (shouldStart) {
        detail.startTimeStamp = timestamp;
        detail.startX = currentX;
        detail.startY = currentY;
        detail.velocityX = detail.velocityY = 0;
    }
    detail.timeStamp = timestamp;
    detail.currentX = detail.scrollLeft = currentX;
    detail.currentY = detail.scrollTop = currentY;
    detail.deltaX = currentX - detail.startX;
    detail.deltaY = currentY - detail.startY;
    const timeDelta = timestamp - prevT;
    if (timeDelta > 0 && timeDelta < 100) {
        const velocityX = (currentX - prevX) / timeDelta;
        const velocityY = (currentY - prevY) / timeDelta;
        detail.velocityX = velocityX * 0.7 + detail.velocityX * 0.3;
        detail.velocityY = velocityY * 0.7 + detail.velocityY * 0.3;
    }
}

export { AppHome as WcTrasportiTable, Content as IonContent };
